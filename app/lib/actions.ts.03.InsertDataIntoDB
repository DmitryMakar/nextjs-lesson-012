'use server';

import { z } from 'zod';

import pg from 'pg';
const { Client } = pg;

const FormSchema = z.object({         //DM Zod data validation object
  id: z.string(),
  customerId: z.string(),
  amount: z.coerce.number(),           //DM Change it from String to number
  status: z.enum(['pending', 'paid']),
  date: z.string(),
});

const CreateInvoice = FormSchema.omit({ id: true, date: true }); //DM id and date are omitted
 
export async function createInvoice(formData: FormData) {
  const { customerId, amount, status } = CreateInvoice.parse({  //DM validate and transform the data
    customerId: formData.get('customerId'),
    amount: formData.get('amount'),
    status: formData.get('status'),
  });
  const amountInCents = amount * 100;                  //DM Calculate the  amount in cents 
  const date = new Date().toISOString().split('T')[0]; //DM Invoice date as YYYY-MM-DD
  // Test it out:
  console.log('customerId = ', customerId);
  console.log('amount, cents = ', amountInCents);
  console.log('status = ', status);
  console.log('invoice date = ', date)

  //insert data into the DB
  try {
    const client = new Client({      
      user: process.env.POSTGRES_USER,
      host: process.env.POSTGRES_HOST,
      database: process.env.POSTGRES_DATABASE,
      password: process.env.POSTGRES_PASSWORD,
      port: Number(process.env.POSTGRES_PORT),
    });    
    await client.connect();
    const result = await client.query(`insert into invoices 
      (customer_id, amount, status, date)
      values ($1, $2, $3, $4)`, [customerId, amountInCents, status, date]);    
    await client.end();
    //console.log("invoice insert result:",result.rows); 
    //return result.rows;    
  } catch (error) {
    //console.error('Database Error:', error);
    //throw new Error('Failed to insert invoice data.');
    return {
      message: 'Database Error: Failed to Create Invoice',
    };
  }

}
